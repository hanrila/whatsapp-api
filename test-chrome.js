// Test script to verify Chrome configuration for Puppeteer and nodeHtmlToImage
const path = require('path');
const fs = require('fs');

// Configure Puppeteer cache directory to use project directory
const projectCacheDir = path.join(__dirname, 'puppeteer-cache');
process.env.PUPPETEER_CACHE_DIR = projectCacheDir;
console.log(`Setting PUPPETEER_CACHE_DIR to: ${projectCacheDir}`);

const puppeteer = require('puppeteer');
const nodeHtmlToImage = require('node-html-to-image');

// Helper function to get Chrome executable path dynamically
function getChromeExecutablePath() {
  const projectRoot = __dirname;
  console.log(`Project root directory: ${projectRoot}`);
  
  // Try to find Chrome in puppeteer-cache directory
  const cacheDir = path.join(projectRoot, 'puppeteer-cache', 'chrome');
  console.log(`Looking for Chrome in cache directory: ${cacheDir}`);
  
  if (fs.existsSync(cacheDir)) {
    try {
      // Find the Chrome version directory dynamically
      const versionDirs = fs.readdirSync(cacheDir).filter(dir => dir.startsWith('win64-'));
      console.log(`Found Chrome version directories: ${versionDirs.join(', ')}`);
      
      if (versionDirs.length > 0) {
        // Use the first (or latest) version found
        const versionDir = versionDirs[0];
        const chromePath = path.join(cacheDir, versionDir, 'chrome-win64', 'chrome.exe');
        console.log(`Checking Chrome executable at: ${chromePath}`);
        
        if (fs.existsSync(chromePath)) {
          console.log(`‚úÖ Using Chrome executable at: ${chromePath}`);
          return chromePath;
        } else {
          console.log(`‚ùå Chrome executable not found at: ${chromePath}`);
        }
      } else {
        console.log('‚ùå No Chrome version directories found in cache');
      }
    } catch (error) {
      console.error('Error reading Chrome cache directory:', error);
    }
  } else {
    console.log(`‚ùå Chrome cache directory not found: ${cacheDir}`);
  }
  
  console.log('‚ö†Ô∏è Chrome executable not found in puppeteer-cache, Puppeteer will try to use system Chrome');
  return null; // Let Puppeteer use its default Chrome
}

async function testPuppeteer() {
  console.log('\n=== Testing Puppeteer ===');
  try {
    const chromeExecutablePath = getChromeExecutablePath();
    
    const launchOptions = {
      headless: true,
      ignoreHTTPSErrors: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu'
      ]
    };

    // Only add executablePath if Chrome is found in cache
    if (chromeExecutablePath) {
      launchOptions.executablePath = chromeExecutablePath;
    }

    console.log('Launching Puppeteer with options:', JSON.stringify(launchOptions, null, 2));
    
    const browser = await puppeteer.launch(launchOptions);
    const page = await browser.newPage();
    await page.goto('https://www.google.com');
    const title = await page.title();
    console.log(`‚úÖ Puppeteer test successful! Page title: ${title}`);
    await browser.close();
  } catch (error) {
    console.error('‚ùå Puppeteer test failed:', error.message);
  }
}

async function testNodeHtmlToImage() {
  console.log('\n=== Testing nodeHtmlToImage ===');
  try {
    const chromeExecutablePath = getChromeExecutablePath();
    
    const options = {
      html: '<html><body><h1>Test Image</h1><p>This is a test image generated by nodeHtmlToImage</p></body></html>',
      quality: 100,
      type: 'png',
      puppeteerArgs: {
        headless: true,
        ignoreHTTPSErrors: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      }
    };

    // Only add executablePath if Chrome is found in cache
    if (chromeExecutablePath) {
      options.puppeteerArgs.executablePath = chromeExecutablePath;
    }

    console.log('Generating image with nodeHtmlToImage...');
    const image = await nodeHtmlToImage(options);
    console.log(`‚úÖ nodeHtmlToImage test successful! Generated image size: ${image.length} bytes`);
  } catch (error) {
    console.error('‚ùå nodeHtmlToImage test failed:', error.message);
  }
}

async function runTests() {
  console.log('üß™ Starting Chrome configuration tests...\n');
  
  await testPuppeteer();
  await testNodeHtmlToImage();
  
  console.log('\nüèÅ Tests completed!');
}

runTests().catch(console.error);